name: "Reusable workflow for Fink integration tests"

on:
  workflow_call:
    inputs:
      minimal:
        required: true
        type: string
      noscience:
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_token:
        required: true

env:
  MINIMAL: ${{ inputs.minimal }}
  NOSCIENCE: ${{ inputs.noscience }}
  # Override the self-hosted runner value
  POD_NAMESPACE: default
  RUNNER: self-hosted
jobs:
  build:
    name: Build image
    # Use an environment variable to set the worker
    strategy:
      matrix:
        runner: [self-hosted]
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Declare Version Variables
        id: vars
        shell: bash
        run: |
          DIR=$(pwd)
          . ./conf.sh
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE=${IMAGE}"
      - name: Build fink-broker image for k8s
        run: |
          ./build.sh
      - name: Export fink-broker image
        run: |
          docker images
          echo "${{ env.IMAGE }}"
          mkdir -p artifacts
          docker save "${{ env.IMAGE }}" > artifacts/image.tar
          echo "${{ env.IMAGE }}" > artifacts/image-tag
      - uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: artifacts
  integration-tests:
    name: Run integration tests
    strategy:
      matrix:
        runner: [self-hosted]
    runs-on: ${{ matrix.runner }}
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Declare Version Variables
        id: vars
        shell: bash
        run: |
          echo "FINK_ALERT_SIMULATOR_DIR=$(. ./conf.sh && echo $FINK_ALERT_SIMULATOR_DIR)" >> $GITHUB_ENV
      - name: Clone fink-alert-simulator code
        run: ./itest/clone-fink-alert-simulator.sh
      - name: Create k8s/kind cluster
        run: |
          VERSION="v1.0.1"
          curl -sfL https://raw.githubusercontent.com/k8s-school/kind-helper/$VERSION/install.sh | bash
          kind-helper create -s
      - name: Load fink-alert-simulator image inside kind
        run: |
          DIR="${{ env.FINK_ALERT_SIMULATOR_DIR }}"
          .  "${{ env.FINK_ALERT_SIMULATOR_DIR }}"/conf.sh
          if docker exec -t -- kind-control-plane crictl pull "$IMAGE"; then
            echo "::notice Succeeded to pull $IMAGE"
          else
            echo "::error Failed to pull $IMAGE"
          fi
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts
      - name: Load container image inside kind
        run: |
          kind load image-archive artifacts/image.tar
          docker exec -- kind-control-plane crictl image
      - name: Install fink-alert-simulator pre-requisites (argoCD)
        run: |
          # sleep infinity
          "${{ env.FINK_ALERT_SIMULATOR_DIR }}"/prereq-install.sh
      - name: Install strimzi (kafka-operator)
        run: ./itest/strimzi-install.sh
      - name: Setup kafka
        run: ./itest/strimzi-setup.sh
      - name: Install fink-broker pre-requisites (Spark)
        run: ./itest/prereq-install.sh
      - name: Install MinIO
        run: ./itest/minio-install.sh
      - uses: actions/setup-go@v4
        with:
          go-version: '1.19.2'
      - name: Install finkctl
        run: go install github.com/astrolabsoftware/finkctl@v1.0.3
      - name: Run fink-alert-simulator
        run: |
          "${{ env.FINK_ALERT_SIMULATOR_DIR }}"/argo-submit.sh
          argo watch @latest
      # - name: Setup tmate session
      # uses: mxschmitt/action-tmate@v3
      - name: Run fink-broker
        run: |
          sleep 10
          ./itest/itest.sh
  image-analysis:
    name: Analyze image
    strategy:
      matrix:
        runner: [self-hosted]
    runs-on: ${{ matrix.runner }}
    permissions:
      security-events: write
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts
      - name: Load image in local registry
        run: |
          docker load --input artifacts/image.tar
          echo "IMAGE=$(cat artifacts/artifacts/image-tag)" >> $GITHUB_ENV
      - name: Scan fink-broker image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ env.IMAGE }}"
          fail-build: false
      - name: Display SARIF report
        run: |
          cat ${{ steps.scan.outputs.sarif }}
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  push:
    name: Push fink-broker image to IN2P3 registry
    strategy:
      matrix:
        runner: [self-hosted]
    runs-on: ${{ matrix.runner }}
    needs: integration-tests
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: docker-artifact
          path: artifacts
      - name: Load image in local registry
        run: |
          docker load --input artifacts/image.tar
          echo "IMAGE=$(cat artifacts/image-tag)" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: gitlab-registry.in2p3.fr
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_token }}
      - name: Push image to IN2P3 registry
        run: |
          docker push ${{ env.IMAGE }}
