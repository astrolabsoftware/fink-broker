name: "Reusable workflow for Fink self-hosted e2e tests"

on:
  workflow_call:
    inputs:
      minimal:
        required: true
        type: string
      noscience:
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_token:
        required: true
env:
  CIUXCONFIG: /tmp/ciux.sh
  CIUX_VERSION: v0.0.1-rc11
  GHA_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  MINIMAL: ${{ inputs.minimal }}
  NOSCIENCE: ${{ inputs.noscience }}
  # Override the self-hosted runner value
  POD_NAMESPACE: default
  CI_REPO: docker-registry.docker-registry:5000
jobs:
  build:
    name: Build image
    runs-on: [self-hosted, v3]
    outputs:
      image: ${{ steps.push.outputs.IMAGE }}
      promoted_image: ${{ steps.push.outputs.PROMOTED_IMAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'
      - name: Install ciux
        run: go install github.com/k8s-school/ciux@"${{ env.CIUX_VERSION }}"
      - name: Ciux project ignition
        run: ciux ignite --selector build $PWD
      - name: Build fink-broker image for k8s
        run: |
          ./build.sh
      - name: Push image to local registry
        id: push
        run: |
          . "$CIUXCONFIG"
          . ./conf.sh
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> "$GITHUB_OUTPUT"
          echo "PROMOTED_IMAGE=$PROMOTED_IMAGE" >> "$GITHUB_OUTPUT"
  integration-tests:
    name: Run integration tests
    runs-on: [self-hosted, v3]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'
      - name: Install ciux
        run: go install github.com/k8s-school/ciux@"${{ env.CIUX_VERSION }}"
      - name: Ciux project ignition
        run: ciux ignite --selector ci --branch="$GHA_BRANCH_NAME" $PWD
      - name: Create ktbx configuration
        run: |
          mkdir -p $HOME/.ktbx
          cat <<EOF > $HOME/.ktbx/config
          kind:
            # Supported only for clusters with one node
            # Use host directory to share data between host and kind node
            # host directory will be mounted on /mnt/extra on each node
            # extraMountPath: /path/to/host/directory

            # Sets "127.0.0.1" as an extra Subject Alternative Names (SANs) for the API Server signing certificate.
            # See https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/#kubeadm-k8s-io-v1beta3-APIServer
            # Usefull to access API server through a ssh tunnel
            localcertsans: false

            # Use calico CNI instead of kindnet
            # useCalico: true
            # Number of worker nodes
            workers: 0

            # Supported only for clusters with one node
            # Certificates must be available on kind host at "/etc/docker/certs.d/{{ .PrivateRegistry }}"
            privateRegistry: "docker-registry.docker-registry:5000"
          EOF
      - name: Create k8s/kind cluster
        run: |
          ktbx install kind
          ktbx install kubectl
          kind version
          kubectl version --client
          ktbx version
          ktbx create -s
      - name: Load fink-alert-simulator image inside kind
        run: |
          . "$CIUXCONFIG"
          .  "$FINK_ALERT_SIMULATOR_DIR"/conf.sh
          if docker exec -t -- kind-control-plane crictl pull "$IMAGE"; then
            echo "::notice Succeeded to pull $IMAGE"
          else
            echo "::error Failed to pull $IMAGE"
            exit 1
          fi
      - name: Load fink-broker image inside kind
        run: |
          IMAGE=${{ needs.build.outputs.image }}
          if docker exec -t -- kind-control-plane crictl pull "$IMAGE"; then
            echo "::notice Succeeded to pull $IMAGE"
          else
            echo "::error Failed to pull $IMAGE"
          fi
      - name: Install fink-alert-simulator pre-requisites (argo-workflows)
        run: |
          . "$CIUXCONFIG"
          "$FINK_ALERT_SIMULATOR_DIR"/prereq-install.sh
      - name: Install strimzi (kafka-operator)
        run: ./itest/strimzi-install.sh
      - name: Setup kafka
        run: ./itest/strimzi-setup.sh
      - name: Install fink-broker pre-requisites (Spark)
        run: |
          sudo apt-get -y update
          sudo apt-get -y install openjdk-8-jdk-headless
          ./itest/prereq-install.sh
      - name: Install MinIO
        run: ./itest/minio-install.sh
      - name: Run fink-alert-simulator
        run: |
          . "$CIUXCONFIG"
          "$FINK_ALERT_SIMULATOR_DIR"/argo-submit.sh
          argo watch @latest
      # - name: Setup tmate session
      # uses: mxschmitt/action-tmate@v3
      - name: Run fink-broker
        run: |
          ./itest/fink-start.sh
      - name: Check ouput topics are created
        run: |
          ./itest/check-results.sh
  image-analysis:
    name: Analyze image
    runs-on: [self-hosted, v3]
    permissions:
      security-events: write
    needs: build
    steps:
      - name: Pull image from local registry
        run: |
          IMAGE=${{ needs.build.outputs.image }}
          docker pull "$IMAGE"
      - name: Scan fink-broker image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ needs.build.outputs.image }}"
          fail-build: false
      - name: Display SARIF report
        run: |
          cat ${{ steps.scan.outputs.sarif }}
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  push:
    name: Push fink-broker image to IN2P3 registry
    runs-on: [self-hosted, v3]
    needs: [build, integration-tests, image-analysis]
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: gitlab-registry.in2p3.fr
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_token }}
      - name: Push image to IN2P3 registry
        run: |
          IMAGE="${{ needs.build.outputs.image }}"
          PROMOTED_IMAGE="${{ needs.build.outputs.promoted_image }}"
          docker pull "$IMAGE"
          docker tag "$IMAGE" "$PROMOTED_IMAGE"
          docker push "$PROMOTED_IMAGE"
