#!/bin/bash
# Copyright 2019-2025 AstroLab Software
# Author: Julien Peloton
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
## Script to launch the python test suite and measure the coverage.
## Must be launched as fink_test
set -e
message_help="""
Run units and integration test suites of Fink\n\n
Usage:\n
    \tfink_test_rubin -s <survey> [--db-integration] [--unit-tests] [--stream-integration] [-h] [-c <conf>]\n\n

By default, nothing is run.\n
You can enable the database integration tests by specifying --db-integration.\n
You can enable the unit tests by specifying --unit-test.\n
You can enable the stream integration tests by specifying --stream-integration.\n
You can specify the configuration file followed by -c or else the default (${FINK_HOME}/conf/rubin/fink.conf.prod) will be used.\n
Use -h to display this help.
"""

# Grab the command line arguments
WITH_DB=false
WITH_UNITS=false
WITH_STREAM=false
while [ "$#" -gt 0 ]; do
  case "$1" in
    --stream-integration)
      WITH_STREAM=true
      shift 1
      ;;
    --db-integration)
      WITH_DB=true
      shift 1
      ;;
    --unit-tests)
      WITH_UNITS=true
      shift 1
      ;;
    -h)
      echo -e $message_help
      exit
      ;;
    -c)
      if [[ $2 == "" ]]; then
        echo "$1 requires an argument" >&2
        exit 1
      fi
      conf="$2"
      shift 2
      ;;
    -single_file)
      SINGLE_FILE=$2
      shift 2
      ;;
  esac
done

SURVEY=rubin

# Source configuration file for tests
if [[ -f $conf ]]; then
  echo "Reading custom test configuration file from " $conf
else
  conf=${FINK_HOME}/conf/${SURVEY}/fink.conf.dev
  echo "Reading the default test configuration file from " $conf
fi

source $conf

# Export variables for tester.py
export FINK_PACKAGES=$FINK_PACKAGES
export FINK_JARS=$FINK_JARS
export KAFKA_IPPORT_SIM=$KAFKA_IPPORT_SIM

# TODO: change me
export KAFKA_TOPIC="ztf_public_20200101"
export NIGHT=20200101

# Add coverage_daemon to the pythonpath. See python/fink_broker/tester.py
export PYTHONPATH="${SPARK_HOME}/python/test_coverage:$PYTHONPATH"
export COVERAGE_PROCESS_START="${FINK_HOME}/.coveragerc"

if [ -n "${SINGLE_FILE}" ]; then
    echo "single file testing..."
    coverage run \
        --source=${FINK_HOME} \
        --rcfile ${FINK_HOME}/.coveragerc $SINGLE_FILE
    exit
fi

if [[ "$WITH_UNITS" = true ]] ; then
  # Run the test suite on the modules assuming the integration
  # tests have been run (to build the databases)
  for i in ${FINK_HOME}/fink_broker/${SURVEY}/*.py
  do
    if [[ ${i##*/} = 'monitoring' ]] ; then
        echo "skip {i}"
    else
      coverage run \
          --source=${FINK_HOME} \
          --rcfile ${FINK_HOME}/.coveragerc $i
    fi
  done

  for i in ${FINK_HOME}/fink_broker/common/*.py
  do
    coverage run \
        --source=${FINK_HOME} \
        --rcfile ${FINK_HOME}/.coveragerc $i
  done
fi

# Combine individual reports in one
coverage combine

unset KAFKA_IPPORT_SIM
unset KAFKA_TOPIC
unset COVERAGE_PROCESS_START
unset FINK_PACKAGES
unset FINK_JARS

coverage report
coverage html
