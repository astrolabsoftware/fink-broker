# Copyright 2018-2025 AstroLab Software
# Author: Julien Peloton
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
######################################
# Local mode (Kafka cluster is spun up on-the-fly in docker).
# Must match the ones used for the Producer
KAFKA_PORT_SIM=9092
KAFKA_IPPORT_SIM="localhost:${KAFKA_PORT_SIM}"

# Cluster mode - you need a Kafka cluster installed with write mode.
# Must match the one used for the Producer
KAFKA_IPPORT="${KAFKA_IPPORT_SIM}"

# From which offset you want to start pulling data. Options are:
# latest (only new data), earliest (connect from the oldest
# offset available), or a number (see Spark Kafka integration).
KAFKA_STARTING_OFFSET="earliest"

# Apache Spark mode
SPARK_MASTER="local[*]"

# Should be Spark options actually (cluster resources, ...)
EXTRA_SPARK_CONFIG=""

# These are the Maven Coordinates of dependencies for Fink
# Change the version according to your Spark version.
# NOTE: HBase packages are not required for Parquet archiving
FINK_PACKAGES=\
org.apache.spark:spark-streaming-kafka-0-10-assembly_2.12:3.4.1,\
org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.1,\
org.apache.spark:spark-avro_2.12:3.4.1,\
org.apache.hbase:hbase-shaded-mapreduce:2.2.7,\
org.slf4j:slf4j-log4j12:1.7.36,\
org.slf4j:slf4j-simple:1.7.36

# Other dependencies (incl. Scala part of Fink)
FINK_JARS=${FINK_HOME}/libs/hbase-spark-hbase2.3.0_spark3.4.1_scala2.12.0_hadoop3.3.6.jar,\
${FINK_HOME}/libs/hbase-spark-protocol-shaded-hbase2.3.0_spark3.4.1_scala2.12.0_hadoop3.3.6.jar

# Time interval between 2 trigger updates (second)
# i.e. the timing of streaming data processing.
# If 0, the query will be executed in micro-batch mode,
# where micro-batches will be generated as soon as the previous
# micro-batch has completed processing.
# Note that this timing is also used for updating the dashboard.
FINK_TRIGGER_UPDATE=2
MAX_OFFSETS_PER_TRIGGER=5000

# Alert schema
# Full path to schema to decode the alerts
FINK_ALERT_SCHEMA=${FINK_HOME}/datasim/basic_alerts/all_distribute_topics/part-00098-1a2981b9-a1a6-4164-83c0-841b7bd4d87b-c000.avro

# Prefix path on disk to save live data.
# They can be in local FS (/path/ or files:///path/) or
# in distributed FS (e.g. hdfs:///path/).
# Be careful though to have enough disk space!
ONLINE_DATA_PREFIX=${FINK_HOME}/online_integration
AGG_DATA_PREFIX=${FINK_HOME}/archive

# The name of the HBase table
SCIENCE_DB_NAME="test_portal"
SCIENCE_DB_CATALOGS=${FINK_HOME}/catalogs_hbase

# HBase configuration file - must be under ${SPARK_HOME}/conf
# You can find an example in ${FINK_HOME}/conf
HBASE_XML_CONF=${SPARK_HOME}/conf/hbase-site.xml

# The minimum level of log for FINK: OFF, DEBUG, INFO, WARN, ERROR, CRITICAL
# Note that for Spark, the level is set to WARN (see log4j.properties)
LOG_LEVEL=INFO

# If set to false, it will assume the fink_broker is in your PYTHONPATH
# otherwise it will package it, and send it to the executors.
DEPLOY_FINK_PYTHON=false

# Path to fink-fat output
FINK_FAT_OUTPUT=${FINK_HOME}/datasim/fink_fat_example

# Path to fink-mm configuration file
# use no-config to disable fink-mm
FINK_MM_CONFIG=${FINK_HOME}/conf/ztf/fink_mm.conf

# TNS configuration
TNS_FOLDER=${FINK_HOME}/tns_logs
TNS_RAW_OUTPUT=""

# Hostless folder
HOSTLESS_FOLDER=${FINK_HOME}/hostless_ids
